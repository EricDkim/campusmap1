<div id="myExcelDiv" style="width: 402px; height: 346px"></div>
<script type="text/javascript" src="https://r.office.microsoft.com/r/rlidExcelWLJS?v=1&kip=1"></script>
<script type="text/javascript">
	/*
	 * This code uses the Microsoft Office Excel Javascript object model to programmatically insert the
	 * Excel Web App into a div with id=myExcelDiv. The full API is documented at
	 * https://msdn.microsoft.com/en-US/library/hh315812.aspx. There you can find out how to programmatically get
	 * values from your Excel file and how to use the rest of the object model. 
	 */

	// Use this file token to reference Book1.xlsx in Excel's APIs
	var fileToken = "SDC3A4940232850481!2954/-4349188602974632831/t=0&s=0&v=!ALFJkxr9JzZdIsk";
	var ewa = null;

	// run the Excel load handler on page load
	if (window.attachEvent) {
		console.log("1");
		window.attachEvent("onload", loadEwaOnPageLoad);
	} else {
		console.log("2");
		window.addEventListener("DOMContentLoaded", loadEwaOnPageLoad, false);
	}

	function loadEwaOnPageLoad() {
		var props = {
			uiOptions: {
				showDownloadButton: false,
				showParametersTaskPane: false
			},
			interactivityOptions: {
				allowTypingAndFormulaEntry: false,
				allowParameterModification: false,
				allowSorting: false,
				allowFiltering: false,
				allowPivotTableInteractivity: false
			}
		};

		Ewa.EwaControl.loadEwaAsync(fileToken, "myExcelDiv", props, onEwaLoaded);
	}

	function getRangeValues(result) {
		var range = result.getUserContext();
		var values = result.getReturnValue();
		console.log(values);
	}

	function onEwaLoaded(result) {
		if(result.getSucceeded()) {
			ewa = Ewa.EwaControl.getInstances().getItem(0);
			var range = ewa.getActiveWorkbook().getRange("Sheet1",0,0,3,2); //(parentName, firstRow, firstColumn, rowCount, columnCount)
			range.getValuesAsync(Ewa.ValuesFormat.Unformatted,getRangeValues,range);
		}
	}
</script>